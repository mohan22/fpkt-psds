kth largest element in integer array



merge_sort()
	split array into 2 halves invoke merge_sort()
	merge two sorted arrays
	
void mergeSort(int arr[],int l, int r){
if(l==r){
return;
}

int c = (l+r)/2;
mergeSort(arr,l,c);
mergeSort(arr,c+1,r);
merge(arr,l,c,r);
}

void merge(int arr[],int l, int c, int r){
	int l1 = l;
	int r1 = c;
	int l2 = c+1;
	int r2 = r;
	int ans[] =  new int[r-l+1];
	int i=0;
	while(l1<=r1&&l2<=r2){
		if(arr[l1]<=arr[l2]){
			ans[i++] = arr[l1++];
		}
		else{
			ans[i++] = arr[l2++];
		}
	}

	while(l1<=r1){
		ans[i++] = arr[l1++];
	}

	while(l2<=r2){
		ans[i++] = arr[l2++];
	}
	
	int j=0;
	for(int i=l;i<=r;i++){
	
	}

}





==================


You are given a list of unique integers and you have to find all the distinct triplets which sum to 0. Example - {-2, 0, -1, 3, 2} -> {{-2, -1, 3}, {-2, 0, 2}}




sort()

for each entry in the sorted array
	helper(arr,-entry)
	
helper(arr,val){
int l,r;
l=0;
r = arr.length-1;
while(l<r){
	if(arr[l]+arr[r]==va){
	return Arrays.asList(arr[l],arr[r]);
	}
	else if(arr[l]+arr[r]<val){
		l++;
	}
	else{
	
	}
}



}



a+b+c = 0
a+b = -c

for(i=0 : n){
	for(j=i+1: n){
		for(k=j+1:n)
		
	}
	
}



Find the connected path on a binary tree having maximum sum.
           4
   3             6
2       5     7     8

1
 2
  3
   4
 90  5
	  6
	  
for each node 
	left = maxPath(node.left)
	right = maxPath(node.right)
	ans = max(ans,left+right+node)
	return max(left,right)+node
	
int maxPath(Node node){
if(node==null){
return 0;
}
int leftMax = maxPath(node.left);
int rightMax = maxPath(node.right);

return max(leftMax,rightMax);


}




